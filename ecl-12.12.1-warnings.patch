--- ./src/c/ffi.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/ffi.d	2012-12-07 15:20:00.520398501 -0700
@@ -701,7 +701,7 @@ si_load_foreign_module(cl_object filenam
 #if !defined(ENABLE_DLOPEN)
 	FEerror("SI:LOAD-FOREIGN-MODULE does not work when ECL is statically linked", 0);
 #else
-	cl_object output;
+	cl_object output = ECL_NIL;
 
 # ifdef ECL_THREADS
 	mp_get_lock(1, ecl_symbol_value(@'mp::+load-compile-lock+'));
--- ./src/c/cinit.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/cinit.d	2012-12-07 15:20:27.867319897 -0700
@@ -149,6 +149,7 @@ static cl_object si_simple_toplevel ()
                         ecl_prin1(sentence, output);
                 }
         } ECL_CATCH_ALL_END;
+	return ECL_NIL;
 }
 
 int
--- ./src/c/read.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/read.d	2012-12-07 15:20:48.636254848 -0700
@@ -2269,7 +2269,7 @@ ecl_init_module(cl_object block, void (*
 	volatile cl_object x;
 	cl_index i, len, perm_len, temp_len;
 	cl_object in;
-	cl_object *VV, *VVtemp = 0;
+	cl_object *VV = 0, *VVtemp = 0;
 
 	if (block == NULL)
                 block = ecl_make_codeblock();
--- ./src/c/compiler.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/compiler.d	2012-12-07 15:21:45.907071363 -0700
@@ -3073,7 +3073,7 @@ si_valid_function_name_p(cl_object name)
 cl_object
 si_make_lambda(cl_object name, cl_object rest)
 {
-	cl_object lambda;
+	cl_object lambda = ECL_NIL;
         const cl_env_ptr the_env = ecl_process_env();
 	volatile cl_compiler_env_ptr old_c_env = the_env->c_env;
 	struct cl_compiler_env new_c_env;
--- ./src/c/unixfsys.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/unixfsys.d	2012-12-07 15:23:40.586702719 -0700
@@ -460,7 +460,6 @@ ecl_file_len(int f)
 
 @(defun rename-file (oldn newn &key (if_exists @':error'))
 	cl_object old_filename, new_filename, old_truename, new_truename;
-	int error;
 @
 
 	/* 1) Get the old filename, and complain if it has wild components,
@@ -504,6 +503,9 @@ ecl_file_len(int f)
                         1, if_exists);
 	}
         {
+#if defined(ECL_MS_WINDOWS_HOST)
+                int error;
+#endif
                 ecl_disable_interrupts();
 #if defined(ECL_MS_WINDOWS_HOST)
 		error = SetErrorMode(0);
@@ -664,7 +666,10 @@ ecl_homedir_pathname(cl_object user)
 {
 	cl_index i;
 	cl_object namestring;
-	const char *h, *d;
+	const char *h;
+#if defined(ECL_MS_WINDOWS_HOST)
+	const char *d;
+#endif
 	if (!Null(user)) {
 #ifdef HAVE_PWD_H
 		struct passwd *pwent = NULL;
--- ./src/c/printer/float_to_digits.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/printer/float_to_digits.d	2012-12-07 15:24:47.690499242 -0700
@@ -177,7 +177,6 @@ change_precision(float_approx *approx, c
                 {
                         cl_object e1 = cl_expt(PRINT_BASE, position);
                         cl_object e2 = ecl_divide(e1, ecl_make_fixnum(2));
-                        cl_object e3 = cl_expt(PRINT_BASE, k); 
                         if (ecl_greatereq(ecl_plus(approx->r, ecl_times(approx->s, e1)),
                                           ecl_times(approx->s, e2)))
                                 position = ecl_one_minus(position);
--- ./src/c/num_co.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/num_co.d	2012-12-07 15:25:29.618382962 -0700
@@ -453,7 +453,7 @@ ecl_ceiling2(cl_object x, cl_object y)
 		}
 #endif
 		default:
-		  (void)0; /*Never reached */
+		  __builtin_unreachable(); /*Never reached */
 		}
 		break;
 	case t_bignum:
@@ -499,7 +499,7 @@ ecl_ceiling2(cl_object x, cl_object y)
 		}
 #endif
 		default:
-		  (void)0; /*Never reached */
+		  __builtin_unreachable(); /*Never reached */
 		}
 		break;
 	case t_ratio:
--- ./src/c/ffi/libraries.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/ffi/libraries.d	2012-12-07 15:26:00.442290888 -0700
@@ -286,7 +286,6 @@ cl_object
 ecl_library_open(cl_object filename, bool force_reload) {
 	cl_object block;
 	bool self_destruct = 0;
-	char *filename_string;
 
 	/* Coerces to a file name but does not merge with cwd */
 	filename = coerce_to_physical_pathname(filename);
--- ./src/c/num_log.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/num_log.d	2012-12-07 15:28:35.705820639 -0700
@@ -476,7 +476,7 @@ cl_object
 si_bit_array_op(cl_object o, cl_object x, cl_object y, cl_object r)
 {
 	cl_fixnum i, j, n, d;
-	cl_object r0;
+	cl_object r0 = ECL_NIL;
 	bit_operator op;
 	bool replace = FALSE;
 	int xi, yi, ri;
--- ./src/c/numbers/expt.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/numbers/expt.d	2012-12-07 15:28:59.089752925 -0700
@@ -81,7 +81,7 @@ expt_zero(cl_object x, cl_object y)
                 return ecl_make_complex(z, ecl_make_fixnum(0));
         default:
                 /* We will never reach this */
-                (void)0;
+                __builtin_unreachable();
         }
 }
 
--- ./src/c/alloc_2.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/alloc_2.d	2012-12-07 15:29:51.633592866 -0700
@@ -767,8 +767,6 @@ to_bitmap(void *x, void *y)
 void
 init_alloc(void)
 {
-        union cl_lispunion o;
-        struct ecl_cons c;
 	int i;
 	if (alloc_initialized) return;
 	alloc_initialized = TRUE;
--- ./src/c/interpreter.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/interpreter.d	2012-12-07 15:30:31.985843385 -0700
@@ -273,7 +273,7 @@ ecl_interpret(cl_object frame, cl_object
         volatile cl_index frame_index = 0;
 	cl_opcode *vector = (cl_opcode*)bytecodes->bytecodes.code;
 	cl_object *data = bytecodes->bytecodes.data->vector.self.t;
-	cl_object reg0, reg1, lex_env = env;
+	cl_object reg0 = ECL_NIL, reg1 = ECL_NIL, lex_env = env;
 	cl_index narg;
 	struct ecl_stack_frame frame_aux;
 	volatile struct ecl_ihs_frame ihs;
--- ./src/c/file.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/file.d	2012-12-07 15:32:16.257565630 -0700
@@ -1101,7 +1101,7 @@ static int
 utf_8_encoder(cl_object stream, unsigned char *buffer, ecl_character c)
 {
 	int nbytes;
-	if (c < 0) {
+	if (c < 0 || c > 0x1FFFFFL) {
 		nbytes = 0;
 	} else if (c <= 0x7F) {
 		buffer[0] = c;
@@ -1116,7 +1116,7 @@ utf_8_encoder(cl_object stream, unsigned
 		buffer[1] = (c & 0x3f) | 0x80; c >>= 6;
 		buffer[0] = c | 0xE0;
 		nbytes = 3;
-	} else if (c <= 0x1FFFFFL) {
+	} else {
 		buffer[3] = (c & 0x3f) | 0x80; c >>= 6;
 		buffer[2] = (c & 0x3f) | 0x80; c >>= 6;
 		buffer[1] = (c & 0x3f) | 0x80; c >>= 6;
@@ -5110,7 +5110,7 @@ ecl_open_stream(cl_object fn, enum ecl_s
 		FEerror("Illegal stream mode ~S", 1, ecl_make_fixnum(smm));
 	}
 	if (flags & ECL_STREAM_C_STREAM) {
-		FILE *fp;
+		FILE *fp = NULL;
 		safe_close(f);
 		/* We do not use fdopen() because Windows seems to
 		 * have problems with the resulting streams. Furthermore, even for
--- ./src/c/serialize.d.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/c/serialize.d	2012-12-07 15:32:31.937850413 -0700
@@ -120,7 +120,7 @@ fix_to_ptr(cl_object ptr)
 static cl_object
 enqueue(pool_t pool, cl_object what)
 {
-        cl_object record, index;
+        cl_object index;
         if (ECL_FIXNUMP(what) || ECL_CHARACTERP(what) || what == OBJNULL) {
                 return what;
         }
--- ./src/h/ecl-inl.h.orig	2012-12-07 14:01:02.000000000 -0700
+++ ./src/h/ecl-inl.h	2012-12-07 15:34:05.409879595 -0700
@@ -73,11 +73,11 @@
                 cl_fixnum padding[(sizeof(struct ecl_base_string)+3)/4*4]; \
         } name[]
 
-#define ecl_def_string_array_elt(chars) {                      \
+#define ecl_def_string_array_elt(chars) { {                      \
                 (int8_t)t_base_string, 0, ecl_aet_bc, 0,            \
                         ECL_NIL, (cl_index)(sizeof(chars))-1,      \
                         (cl_index)(sizeof(chars))-1,            \
-                        (ecl_base_char*)(chars) }
+                        (ecl_base_char*)(chars) } }
 
 #define ecl_def_ct_base_string(name,chars,len,static,const)     \
         static const struct ecl_base_string name ## _data = {    \
